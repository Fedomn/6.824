// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapReduceClient is the client API for MapReduce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapReduceClient interface {
	AskTask(ctx context.Context, in *AskTaskArgs, opts ...grpc.CallOption) (*AskTaskReply, error)
	MapTask(ctx context.Context, in *MapTaskArgs, opts ...grpc.CallOption) (*MapTaskReply, error)
	ReduceTask(ctx context.Context, in *ReduceTaskArgs, opts ...grpc.CallOption) (*ReduceTaskReply, error)
	Heartbeat(ctx context.Context, in *HeartbeatArgs, opts ...grpc.CallOption) (*HeartbeatReply, error)
}

type mapReduceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceClient(cc grpc.ClientConnInterface) MapReduceClient {
	return &mapReduceClient{cc}
}

func (c *mapReduceClient) AskTask(ctx context.Context, in *AskTaskArgs, opts ...grpc.CallOption) (*AskTaskReply, error) {
	out := new(AskTaskReply)
	err := c.cc.Invoke(ctx, "/mr.proto.MapReduce/AskTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceClient) MapTask(ctx context.Context, in *MapTaskArgs, opts ...grpc.CallOption) (*MapTaskReply, error) {
	out := new(MapTaskReply)
	err := c.cc.Invoke(ctx, "/mr.proto.MapReduce/MapTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceClient) ReduceTask(ctx context.Context, in *ReduceTaskArgs, opts ...grpc.CallOption) (*ReduceTaskReply, error) {
	out := new(ReduceTaskReply)
	err := c.cc.Invoke(ctx, "/mr.proto.MapReduce/ReduceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceClient) Heartbeat(ctx context.Context, in *HeartbeatArgs, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/mr.proto.MapReduce/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceServer is the server API for MapReduce service.
// All implementations should embed UnimplementedMapReduceServer
// for forward compatibility
type MapReduceServer interface {
	AskTask(context.Context, *AskTaskArgs) (*AskTaskReply, error)
	MapTask(context.Context, *MapTaskArgs) (*MapTaskReply, error)
	ReduceTask(context.Context, *ReduceTaskArgs) (*ReduceTaskReply, error)
	Heartbeat(context.Context, *HeartbeatArgs) (*HeartbeatReply, error)
}

// UnimplementedMapReduceServer should be embedded to have forward compatible implementations.
type UnimplementedMapReduceServer struct {
}

func (UnimplementedMapReduceServer) AskTask(context.Context, *AskTaskArgs) (*AskTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskTask not implemented")
}
func (UnimplementedMapReduceServer) MapTask(context.Context, *MapTaskArgs) (*MapTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapTask not implemented")
}
func (UnimplementedMapReduceServer) ReduceTask(context.Context, *ReduceTaskArgs) (*ReduceTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceTask not implemented")
}
func (UnimplementedMapReduceServer) Heartbeat(context.Context, *HeartbeatArgs) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafeMapReduceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapReduceServer will
// result in compilation errors.
type UnsafeMapReduceServer interface {
	mustEmbedUnimplementedMapReduceServer()
}

func RegisterMapReduceServer(s grpc.ServiceRegistrar, srv MapReduceServer) {
	s.RegisterService(&MapReduce_ServiceDesc, srv)
}

func _MapReduce_AskTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).AskTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mr.proto.MapReduce/AskTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).AskTask(ctx, req.(*AskTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduce_MapTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).MapTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mr.proto.MapReduce/MapTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).MapTask(ctx, req.(*MapTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduce_ReduceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).ReduceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mr.proto.MapReduce/ReduceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).ReduceTask(ctx, req.(*ReduceTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduce_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mr.proto.MapReduce/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServer).Heartbeat(ctx, req.(*HeartbeatArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MapReduce_ServiceDesc is the grpc.ServiceDesc for MapReduce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapReduce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mr.proto.MapReduce",
	HandlerType: (*MapReduceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskTask",
			Handler:    _MapReduce_AskTask_Handler,
		},
		{
			MethodName: "MapTask",
			Handler:    _MapReduce_MapTask_Handler,
		},
		{
			MethodName: "ReduceTask",
			Handler:    _MapReduce_ReduceTask_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _MapReduce_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mr.proto",
}
